{"ast":null,"code":"var _class;\n/**\n * Title: sign-in.guard.ts\n * Author: William Austin\n * Date: 26 August 2023\n * Description: Sign In Route Guard\n */\nimport { Router } from '@angular/router';\nimport { inject } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\n//allows the class to be injectable\nclass SignInGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return true;\n  }\n}\n//Creates the guard\n_class = SignInGuard;\n_class.ɵfac = function SignInGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const isSignInGuard = (route, state) => {\n  //allows for the router to be useable\n  let _router = inject(Router);\n  //grabs the isLoggedIn item from local storage\n  let isLoggedIn = localStorage.getItem('isLoggedIn');\n  //checks to see if user is logged in. If not, returns them to the login page\n  if (!isLoggedIn) {\n    _router.navigate(['']);\n    return false;\n  }\n  return inject(SignInGuard).canActivate(route, state);\n};","map":{"version":3,"names":["Router","inject","SignInGuard","constructor","router","canActivate","route","state","_class","i0","ɵɵinject","i1","factory","ɵfac","providedIn","isSignInGuard","_router","isLoggedIn","localStorage","getItem","navigate"],"sources":["/Users/WillAustin/Documents/GitHub/web-425/week-3/enhanced-secure-profile-app/src/app/sign-in.guard.ts"],"sourcesContent":["/**\n * Title: sign-in.guard.ts\n * Author: William Austin\n * Date: 26 August 2023\n * Description: Sign In Route Guard\n */\n\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Injectable, inject } from '@angular/core'\nimport { CanActivateFn } from '@angular/router';\n\n//allows the class to be injectable\n@Injectable({\n  providedIn: 'root'\n})\n\n//constructos the SignInGuard class, creates the private router and creates the canactivate function\nclass SignInGuard {\n  constructor(private router: Router) {}\n  \n  isLoggedIn: boolean; \n\n  canActivate(\n    route: ActivatedRouteSnapshot, \n    state: RouterStateSnapshot): boolean {\n      return true; \n    }\n}\n\n//Creates the guard\nexport const isSignInGuard: CanActivateFn = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot):boolean => {\n  //allows for the router to be useable\n  let _router = inject(Router)\n  //grabs the isLoggedIn item from local storage\n  let isLoggedIn = localStorage.getItem('isLoggedIn')\n  //checks to see if user is logged in. If not, returns them to the login page\n  if(!isLoggedIn) {\n    _router.navigate([''])\n    return false;\n  }\n  \n  return inject(SignInGuard).canActivate(route, state)\n};\n"],"mappings":";AAAA;;;;;;AAOA,SAAiCA,MAAM,QAA6B,iBAAiB;AACrF,SAAqBC,MAAM,QAAQ,eAAe;;;AAGlD;AACA,MAKMC,WAAW;EACfC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAIrCC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IACxB,OAAO,IAAI;EACb;;AAGJ;AAAAC,MAAA,GAZMN,WAAW;;mBAAXA,MAAW,EAAAO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAX,MAAA;AAAA;;SAAXE,MAAW;EAAAU,OAAA,EAAXV,MAAW,CAAAW,IAAA;EAAAC,UAAA,EAJH;AAAM;AAiBpB,OAAO,MAAMC,aAAa,GAAkBA,CAACT,KAA6B,EAAEC,KAA0B,KAAY;EAChH;EACA,IAAIS,OAAO,GAAGf,MAAM,CAACD,MAAM,CAAC;EAC5B;EACA,IAAIiB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EACnD;EACA,IAAG,CAACF,UAAU,EAAE;IACdD,OAAO,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IACtB,OAAO,KAAK;;EAGd,OAAOnB,MAAM,CAACC,WAAW,CAAC,CAACG,WAAW,CAACC,KAAK,EAAEC,KAAK,CAAC;AACtD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}