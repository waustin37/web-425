{"ast":null,"code":"var _class;\n/**\n * Title: sign-in.guard.ts\n * Author: William Austin\n * Date: 26 August 2023\n * Description: Sign In Route Guard\n */\nimport { Router } from '@angular/router';\nimport { inject } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nclass isSignInGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return true;\n  }\n}\n_class = isSignInGuard;\n_class.ɵfac = function isSignInGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const SignInGuard = (route, state) => {\n  let _router = inject(Router);\n  let isLoggedIn = next.queryParams.isLoggedIn;\n  //checks to see if user is logged in. If not, returns them to the login page\n  if (isLoggedIn) {\n    return true;\n  } else {\n    _router.navigate(['/']);\n    return false;\n  }\n  return inject(SignInGuard).canActivate(route, state);\n};","map":{"version":3,"names":["Router","inject","isSignInGuard","constructor","router","canActivate","route","state","i0","ɵɵinject","i1","factory","ɵfac","providedIn","SignInGuard","_router","isLoggedIn","next","queryParams","navigate"],"sources":["/Users/WillAustin/Documents/GitHub/web-425/week-3/enhanced-secure-profile-app/src/app/sign-in.guard.ts"],"sourcesContent":["/**\n * Title: sign-in.guard.ts\n * Author: William Austin\n * Date: 26 August 2023\n * Description: Sign In Route Guard\n */\n\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Injectable, inject } from '@angular/core'\nimport { CanActivateFn } from '@angular/router';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nclass isSignInGuard {\n  constructor(private router: Router) {}\n  \n  isLoggedIn: boolean; \n\n  canActivate(\n    route: ActivatedRouteSnapshot, \n    state: RouterStateSnapshot): boolean {\n      return true; \n    }\n}\n\nexport const SignInGuard: CanActivateFn = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot):boolean => {\n  let _router = inject(Router)\n\n  let isLoggedIn = next.queryParams.isLoggedIn;\n  //checks to see if user is logged in. If not, returns them to the login page\n  if (isLoggedIn) {\n    return true;\n  } else {\n    _router.navigate(['/']);\n    return false;\n  }\n  \n  return inject(SignInGuard).canActivate(route, state)\n};\n"],"mappings":";AAAA;;;;;;AAOA,SAAiCA,MAAM,QAA6B,iBAAiB;AACrF,SAAqBC,MAAM,QAAQ,eAAe;;;AAIlD,MAIMC,aAAa;EACjBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAIrCC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IACxB,OAAO,IAAI;EACb;;SATEL,aAAa;;mBAAbA,MAAa,EAAAM,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAV,MAAA;AAAA;;SAAbE,MAAa;EAAAS,OAAA,EAAbT,MAAa,CAAAU,IAAA;EAAAC,UAAA,EAHL;AAAM;AAepB,OAAO,MAAMC,WAAW,GAAkBA,CAACR,KAA6B,EAAEC,KAA0B,KAAY;EAC9G,IAAIQ,OAAO,GAAGd,MAAM,CAACD,MAAM,CAAC;EAE5B,IAAIgB,UAAU,GAAGC,IAAI,CAACC,WAAW,CAACF,UAAU;EAC5C;EACA,IAAIA,UAAU,EAAE;IACd,OAAO,IAAI;GACZ,MAAM;IACLD,OAAO,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IACvB,OAAO,KAAK;;EAGd,OAAOlB,MAAM,CAACa,WAAW,CAAC,CAACT,WAAW,CAACC,KAAK,EAAEC,KAAK,CAAC;AACtD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}