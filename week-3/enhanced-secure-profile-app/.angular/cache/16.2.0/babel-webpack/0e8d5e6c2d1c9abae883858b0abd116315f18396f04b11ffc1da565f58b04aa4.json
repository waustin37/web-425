{"ast":null,"code":"var _class;\n/**\n * Title: sign-in.guard.ts\n * Author: William Austin\n * Date: 26 August 2023\n * Description: Sign In Route Guard\n */\nimport { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nclass SignInGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return true;\n  }\n}\n_class = SignInGuard;\n_class.ɵfac = function SignInGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const isSignInGuard = (route, state) => {\n  let _router = inject(Router);\n  let isLoggedIn = localStorage.getItem('isLoggedIn');\n  if (!isLoggedIn) {\n    _router.navigate(['']);\n    return false;\n  }\n  return inject(SignInGuard).canActivate(route, state);\n};","map":{"version":3,"names":["inject","Router","SignInGuard","constructor","router","canActivate","route","state","i0","ɵɵinject","i1","factory","ɵfac","providedIn","isSignInGuard","_router","isLoggedIn","localStorage","getItem","navigate"],"sources":["/Users/WillAustin/Documents/GitHub/web-425/week-3/enhanced-secure-profile-app/src/app/sign-in.guard.ts"],"sourcesContent":["/**\n * Title: sign-in.guard.ts\n * Author: William Austin\n * Date: 26 August 2023\n * Description: Sign In Route Guard\n */\n\nimport { Injectable, inject } from '@angular/core';\nimport { CanActivateFn, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nclass SignInGuard {\n  constructor(private router: Router) {}\n  isLoggedIn: boolean;\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean {\n      return true;\n    }\n}\n\nexport const isSignInGuard: CanActivateFn = (route:ActivatedRouteSnapshot, state:RouterStateSnapshot): boolean => {\n\n  let _router = inject(Router)\n\n  let isLoggedIn = localStorage.getItem('isLoggedIn')\n\n  if(!isLoggedIn) {\n    _router.navigate([''])\n    return false;\n  }\n  \n  return inject(SignInGuard).canActivate(route, state)\n};"],"mappings":";AAAA;;;;;;AAOA,SAAqBA,MAAM,QAAQ,eAAe;AAElD,SAASC,MAAM,QAAQ,iBAAiB;;;AAExC,MAIMC,WAAW;EACfC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IACxB,OAAO,IAAI;EACb;;SAPEL,WAAW;;mBAAXA,MAAW,EAAAM,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAT,MAAA;AAAA;;SAAXC,MAAW;EAAAS,OAAA,EAAXT,MAAW,CAAAU,IAAA;EAAAC,UAAA,EAHH;AAAM;AAapB,OAAO,MAAMC,aAAa,GAAkBA,CAACR,KAA4B,EAAEC,KAAyB,KAAa;EAE/G,IAAIQ,OAAO,GAAGf,MAAM,CAACC,MAAM,CAAC;EAE5B,IAAIe,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAEnD,IAAG,CAACF,UAAU,EAAE;IACdD,OAAO,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IACtB,OAAO,KAAK;;EAGd,OAAOnB,MAAM,CAACE,WAAW,CAAC,CAACG,WAAW,CAACC,KAAK,EAAEC,KAAK,CAAC;AACtD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}